<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源 | Belicheva Daria</title>
    <link>https://dmbelicheva.github.io/tag/%E5%BC%80%E6%BA%90/</link>
      <atom:link href="https://dmbelicheva.github.io/tag/%E5%BC%80%E6%BA%90/index.xml" rel="self" type="application/rss+xml" />
    <description>开源</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dmbelicheva.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>开源</title>
      <link>https://dmbelicheva.github.io/tag/%E5%BC%80%E6%BA%90/</link>
    </image>
    
    <item>
      <title>Оформление отчета</title>
      <link>https://dmbelicheva.github.io/post/post-3/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/post/post-3/</guid>
      <description>&lt;h2 id=&#34;что-такое-отчет&#34;&gt;Что такое отчет?&lt;/h2&gt;
&lt;p&gt;Отчёт — это структурированное сообщение о результатах вашей работы, которое вы делаете в устной или письменной форме.&lt;/p&gt;
&lt;p&gt;Обычно в отчете должны присутствовать следующие элементы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Цель&lt;/li&gt;
&lt;li&gt;Задачи&lt;/li&gt;
&lt;li&gt;Теоретическое введение&lt;/li&gt;
&lt;li&gt;Описание выполнения работы&lt;/li&gt;
&lt;li&gt;Итоги&lt;/li&gt;
&lt;li&gt;Список литературы&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;как-оформлять-отчет&#34;&gt;Как оформлять отчет?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Перед выполнением работы обычно уже есть поставленная цель, поэтому ее и следует записать в отчет. Главное корректно, грамотно и кратко ее сформулировать.&lt;/li&gt;
&lt;li&gt;На основе цели перед Вами выдвигаются (или Вы сами составляете) задачи, которые необходимо выполнить, чтобы достичь желаемого результата. Задачи лучше написать в отчете под отельными номерами (также можно выделять подпункты, если требуется).&lt;/li&gt;
&lt;li&gt;В теоретическом введение надо написать информацию, связанную с Вашей работой. Это могут быть ключевые определения вместе с примерами или же просто описание какого-либо процесса/действия/объекта.&lt;/li&gt;
&lt;li&gt;Далее Вам нужно описать все этапы работы (иногда давая пояснения), желательно подкреплять эти этапы картинками (их нужно подписать и расставить ссылки на них в нужных местах).&lt;/li&gt;
&lt;li&gt;Итоги формулируются в соответствии с целью. Они тоже должны быть достаточно краткими.&lt;/li&gt;
&lt;li&gt;Источники, откуда Вы брали информацию для теоретического введения, необходимо указать в конце Вашего отчета (они должны быть оформлены по ГОСТу).&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://dmbelicheva.github.io/post/week-1/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/post/week-1/</guid>
      <description>&lt;h2 id=&#34;цели-прошедшей-недели&#34;&gt;Цели прошедшей недели&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Выполнить две лабораторные работы по предмету операционные системы.&lt;/li&gt;
&lt;li&gt;Посетить все занятия (операционные системы, физкультура и модуль переводчика)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;процесс-выполнения&#34;&gt;Процесс выполнения&lt;/h2&gt;
&lt;p&gt;Во вторник я посетила семинары по операционным системам, начала выполнение лабораторной работы №5, потом отправилась на занятия по физкультуре (где мы гуляла вокруг озера).
В пятницу у меня были дистанционные занятия по английскому языку (модуль переводчика). Там я написала тест по прошедшим темам.&lt;/p&gt;
&lt;h2 id=&#34;итоги&#34;&gt;Итоги&lt;/h2&gt;
&lt;p&gt;В результате выполнения двух лабораторных работ (5 и 6) я научилась работать с файловой системой Linux, а также ознакомилась с инструментами поиска файлов и фильтрации текстовых данных. Узнала, что такое перенаправление ввода/выводы и что такое конвейер. Продолжила освоение работы с терминалом Linux, изучение новых команд.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://dmbelicheva.github.io/post/week-2/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/post/week-2/</guid>
      <description>&lt;h2 id=&#34;цели-прошедшей-недели&#34;&gt;Цели прошедшей недели&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Выполнить две лабораторные работы по предмету операционные системы.&lt;/li&gt;
&lt;li&gt;Отметить День Победы&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;процесс-выполнения&#34;&gt;Процесс выполнения&lt;/h2&gt;
&lt;p&gt;Во вторник был праздничный день, который я провела на даче с друзьями. После этого я отправилась в Москву, где я начала выполнение лабораторнной работы №7.
В среду у меня были занятия по компьютерной алгебре, где мы продолжали работу с Maxima.
В четверг у меня был предмет технология программирования. Там мы писали программы на С++.
В пятницу у меня были занятия по английскому языку.&lt;/p&gt;
&lt;h2 id=&#34;итоги&#34;&gt;Итоги&lt;/h2&gt;
&lt;p&gt;В результате выполнения двух лабораторных работ (7 и 8) я освоила основные возможности командной оболочки Midnight Commander. Приобрела навыки практической работы по просмотру каталогов и файлов; манипуляций
с ними. А также познакомилась с операционной системой Linux и получила практические навыки работы с редактором vi, установленным по умолчанию практически во всех дистрибутивах.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://dmbelicheva.github.io/post/week-3/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/post/week-3/</guid>
      <description>&lt;h2 id=&#34;цели-прошедшей-недели&#34;&gt;Цели прошедшей недели&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Выполнить две лабораторные работы по предмету операционные системы.&lt;/li&gt;
&lt;li&gt;Написать контрольную работу по компьютерной алгебре&lt;/li&gt;
&lt;li&gt;Сдать зачет по английскому языку&lt;/li&gt;
&lt;li&gt;Сходить на ночь в университете&lt;/li&gt;
&lt;li&gt;Сходить на день открытых дверей в субботу&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;процесс-выполнения&#34;&gt;Процесс выполнения&lt;/h2&gt;
&lt;p&gt;Неделя началась достаточно неприятно (в понедельник были дистанционные лекции с 9 утра, но это не так плохо). Во вторник я пришла на семинары по операционным системам, и к моему огорчению, там было только два моих одногруппника и преподаватель, но потом пришли две мои подруги, что значительно улучшило мою жизнь. Я пыталась учиться программировать на bash (пока дается с трудом), но, как говорится, что не убивает нас, делает нас сильнее. В тот день осилила 10 лабораторную работу, что я конечно же считаю достижением. После этого я отправилась на физкультуру, где я провела достаточно утомительные полтора часа ходя по кругу. На следующий день меня ждали не очень приятные боли в мышцах. В среду я написала контрольную по компьютерной алгебре, она была легкой, особенно если учитывать тот факт, что нам разрешили пользоваться лекциями. Вот такой краткий обзор у меня получился. Заходите на мой сайт и следите за новостями моей прекрасной жизни!&lt;/p&gt;
&lt;h2 id=&#34;итоги&#34;&gt;Итоги&lt;/h2&gt;
&lt;p&gt;Неделя вышла продуктивной.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://dmbelicheva.github.io/post/week-4/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/post/week-4/</guid>
      <description>&lt;h2 id=&#34;цели-прошедшей-недели&#34;&gt;Цели прошедшей недели&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Выполнить две лабораторные работы по предмету операционные системы.&lt;/li&gt;
&lt;li&gt;Сдать зачет по английскому языку&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;процесс-выполнения&#34;&gt;Процесс выполнения&lt;/h2&gt;
&lt;p&gt;На этой неделе мне пришлось немало повозиться с 11 лабораторной работой, и в итоге я ее осилила, чем я очень горжусь. Я попыталась приобрести навыки программирования на bash (все прошло лучше, чем могло быть). Также я сдала зачет по английскому языку. Нам надо было написать и рассказать монолог, а потом мои одногруппники задавали мне дополнительные вопросы. Я смогла на все ответить. Лаборатные по технологиям программирования проходят не так гладко, как хотелось бы, но я держусь!&lt;/p&gt;
&lt;h2 id=&#34;итоги&#34;&gt;Итоги&lt;/h2&gt;
&lt;p&gt;Неделя вышла продуктивной.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git.</title>
      <link>https://dmbelicheva.github.io/post/post-1/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/post/post-1/</guid>
      <description>&lt;h2 id=&#34;version-control-systems&#34;&gt;Version control systems&lt;/h2&gt;
&lt;p&gt;Version Control Systems (VCS) are used when several people work on one project. Usually, the main project tree is stored in a local or remote repository, to which access is configured for project participants. By
when making changes to the project content, the version control system allows you to fix them, combine changes made by different project participants, roll back to any earlier version of the project, if required.&lt;/p&gt;
&lt;p&gt;In classical version control systems, a centralized model is used, assuming a single repository for storing files. Most version control functions are performed by a special server. The project participant (user) receives the version of files he needs before starting work through certain commands. After making changes, the user places the new version in the repository. At the same time, previous versions are not deleted from the central repository and you can return to them at any time. The server may not save the full version of the modified files, but perform a so—called delta compression - save only changes between successive versions, which reduces the amount of data stored.&lt;/p&gt;
&lt;p&gt;Version control systems support the ability to track and resolve conflicts that may arise when several people work on a single file. You can merge (merge) changes made by different participants (automatically or manually), manually select the desired version, cancel the changes altogether or lock files for modification. Depending on the settings, the lock does not allow other users to get a working copy or prevents changing the working copy of the file by means of the OS file system, thus providing privileged access to only one user working with the file.&lt;/p&gt;
&lt;p&gt;Version control systems can also provide additional, more flexible functionality. For example, they can support working with multiple versions of a single file, keeping a common history of changes up to the point of branching versions and their own change histories of each branch. In addition, information is usually available about which of the participants, when and what changes were made. Usually this kind of information is stored in the change log, access to which can be restricted.&lt;/p&gt;
&lt;p&gt;Unlike the classical ones, in distributed version control systems, a central repository is not mandatory.
Among the classic VCS, the most famous are CVS, Subversion, and among the distributed ones — Git, Bazaar, Mercurial. The principles of their work are similar, they differ mainly
the syntax of the commands used in the work.&lt;/p&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;p&gt;Git is a console utility for tracking and maintaining the history of file changes in your project. It is most often used for code, but it is also possible for other files. For example, for pictures - useful for designers.
With Git-a, you can roll back your project to an older version, compare, analyze, or merge your changes into the repository.
A repository is a repository of your code and the history of its changes. Git works locally and all your repositories are stored in specific folders on your hard drive.
Your repositories can also be stored on the Internet. Usually three services are used for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GitHub&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bitbucket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitLab&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each save point of your project is called a commit. Each commit-a has a hash (unique id) and a comment. A branch is assembled from such commits. A branch is a history of changes. Each branch has its own name. A repository can contain several branches that are created from other branches or merged into them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки научного программирования</title>
      <link>https://dmbelicheva.github.io/post/post-4/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/post/post-4/</guid>
      <description>&lt;h1 id=&#34;научные-языки-программирования&#34;&gt;Научные языки программирования&lt;/h1&gt;
&lt;p&gt;В компьютерном программировании , научный язык программирования может относиться к двум степеням той же концепции.&lt;/p&gt;
&lt;p&gt;В широком смысле научный язык программирования - это язык программирования, который широко используется в вычислительной науке и вычислительной математике . В этом смысле C / C ++ и Python можно рассматривать как языки научного программирования.&lt;/p&gt;
&lt;p&gt;В более широком смысле научный язык программирования - это язык, который разработан и оптимизирован для использования математических формул и матриц . Такие языки характеризуются не только наличием библиотек, выполняющих математические или научные функции, но и синтаксисом самого языка. Например, ни C ++, ни Python не имеют встроенных типов матриц или функций для матричной арифметики (сложение, умножение и т. Д.); вместо этого эта функция доступна через стандартные библиотеки. Языки научного программирования в более строгом смысле включают ALGOL , APL , Fortran , J , Julia ,Maple , MATLAB и R.&lt;/p&gt;
&lt;p&gt;Языки научного программирования не следует путать с научным языком в целом, который свободно относится к более высоким стандартам точности, правильности и краткости, ожидаемым от практиков научного метода .&lt;/p&gt;
&lt;h1 id=&#34;примеры&#34;&gt;Примеры&lt;/h1&gt;
&lt;h2 id=&#34;линейная-алгебра&#34;&gt;Линейная алгебра&lt;/h2&gt;
&lt;p&gt;Языки научного программирования предоставляют возможности для работы с линейной алгеброй.
Работа с большими векторами и матрицами является ключевой особенностью этих языков, поскольку линейная алгебра закладывает основу математической оптимизации , которая, в свою очередь, позволяет использовать основные приложения, такие как глубокое обучение.&lt;/p&gt;
&lt;h2 id=&#34;математическая-оптимизация&#34;&gt;Математическая оптимизация&lt;/h2&gt;
&lt;p&gt;В научном языке программирования мы можем вычислять оптимум функции с синтаксисом, близким к математическому языку.
В этом примере используется метод минимизации Ньютона . Современные языки научного программирования будут использовать автоматическое дифференцирование для вычисления градиентов и гессианов функции, заданной в качестве входных данных; ср. дифференцируемое программирование . Здесь для этой задачи выбрана автоматическая прямая дифференциация. Старые языки научного программирования, такие как почтенный Фортран, требовали от программиста передавать рядом с функцией, которая должна быть оптимизирована, функцию, которая вычисляет градиент, и функцию, которая вычисляет гессиан.&lt;/p&gt;
&lt;p&gt;Чем больше знаний о функции, которую необходимо минимизировать, тем больше можно использовать более эффективные алгоритмы. Например, выпуклая оптимизация обеспечивает более быстрые вычисления, когда функция является выпуклой, квадратичное программирование обеспечивает более быстрые вычисления, когда функция не более чем квадратична по своим переменным, и линейное программирование, когда функция максимально линейна.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки разметки. LaTeX.</title>
      <link>https://dmbelicheva.github.io/post/post-2/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/post/post-2/</guid>
      <description>&lt;h2 id=&#34;языки-разметки-что-это-такое&#34;&gt;Языки разметки. Что это такое?&lt;/h2&gt;
&lt;p&gt;Язык разметки (markup language) – средство описания данных и метаданных, хранящихся в документе.&lt;/p&gt;
&lt;p&gt;Примеры языков разметки:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Язык разметки гипертекста HTML&lt;/li&gt;
&lt;li&gt;Язык разметки XML&lt;/li&gt;
&lt;li&gt;Язык разметки векторной графики SVG&lt;/li&gt;
&lt;li&gt;Язык разметки текста и формул TEX&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;основные-элементы-разметки&#34;&gt;Основные элементы разметки&lt;/h2&gt;
&lt;p&gt;Основными понятиями любого языка разметки являются теги, элементы и атрибуты.
Теги (tags) – специальные символы, позволяющие отличать в документе описание разметки от описания данных.
Элемент – это тэги в совокупности с их содержанием (данными).
Атрибут используется при определении элемента, чтобы задать какие-либо параметры, уточняющие характеристики данного элемента.&lt;/p&gt;
&lt;h2 id=&#34;виды-разметки&#34;&gt;Виды разметки&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Стилистическая разметка отвечает за внешний вид документа.&lt;/li&gt;
&lt;li&gt;Структурная разметка задает структуру документа.&lt;/li&gt;
&lt;li&gt;Семантическая (контентная) разметка информирует о содержании данных.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;latex&#34;&gt;LaTex&lt;/h2&gt;
&lt;p&gt;LaTEX (произносится как «лэйтех» или «латех») представляет собой инструмент для создания профессиональных документов. В его основе лежит парадигма редактирования WYSIWYM (что вижу, то и подразумеваю), то есть от пользователя требуется сосредоточиться только на содержимом документа, оставив его форматирование программе. Вместо ручного распределения текста по странице, как это делается в Microsoft Word или LibreOffice Writer, можно просто его вводить, позволив LaTeX заняться остальным.&lt;/p&gt;
&lt;h2 id=&#34;зачем-нужен-latex&#34;&gt;Зачем нужен LaTeX?&lt;/h2&gt;
&lt;p&gt;Этот инструмент используется повсеместно для создания научных документов, написания книг, а также многих других форм публикаций. Он позволяет не только создавать красиво оформленные документы, но также дает пользователям возможность очень быстро реализовывать такие сложные элементы печатного набора, как математические выражения, таблицы, ссылки и библиографии, получая согласованную разметку по всем разделам.&lt;/p&gt;
&lt;p&gt;Благодаря доступности большого числа открытых библиотек (об этом чуть позже) возможности LaTEX становятся практически безграничны. Эти библиотеки расширяют возможности пользователей еще больше, позволяя добавлять сноски, рисовать схемы и пр.&lt;/p&gt;
&lt;p&gt;Одна из наиболее веских причин, по которой многие используют LaTeX, заключается в отделении содержания документа от его стиля. Это означает, что после написания содержимого, можно с легкостью изменять его внешний вид. Аналогичным образом, можно создать один стиль документа и использовать его для стандартизации внешнего вида других.&lt;/p&gt;
&lt;p&gt;Это позволяет научным журналам создавать шаблоны для предлагаемых на рассмотрение материалов. Такие шаблоны имеют заданную разметку, в результате чего добавить остается лишь содержание. На деле существуют сотни подобных шаблонов, начиная с различных резюме и заканчивая презентациями слайдов.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
