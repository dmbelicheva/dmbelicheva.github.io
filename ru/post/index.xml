<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Беличева Дарья</title>
    <link>https://dmbelicheva.github.io/ru/post/</link>
      <atom:link href="https://dmbelicheva.github.io/ru/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>ru-ru</language><lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://dmbelicheva.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://dmbelicheva.github.io/ru/post/</link>
    </image>
    
    <item>
      <title>Оформление отчета</title>
      <link>https://dmbelicheva.github.io/ru/post/post-3/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/ru/post/post-3/</guid>
      <description>&lt;h2 id=&#34;что-такое-отчет&#34;&gt;Что такое отчет?&lt;/h2&gt;
&lt;p&gt;Отчёт — это структурированное сообщение о результатах вашей работы, которое вы делаете в устной или письменной форме.&lt;/p&gt;
&lt;p&gt;Обычно в отчете должны присутствовать следующие элементы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Цель&lt;/li&gt;
&lt;li&gt;Задачи&lt;/li&gt;
&lt;li&gt;Теоретическое введение&lt;/li&gt;
&lt;li&gt;Описание выполнения работы&lt;/li&gt;
&lt;li&gt;Итоги&lt;/li&gt;
&lt;li&gt;Список литературы&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;как-оформлять-отчет&#34;&gt;Как оформлять отчет?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Перед выполнением работы обычно уже есть поставленная цель, поэтому ее и следует записать в отчет. Главное корректно, грамотно и кратко ее сформулировать.&lt;/li&gt;
&lt;li&gt;На основе цели перед Вами выдвигаются (или Вы сами составляете) задачи, которые необходимо выполнить, чтобы достичь желаемого результата. Задачи лучше написать в отчете под отельными номерами (также можно выделять подпункты, если требуется).&lt;/li&gt;
&lt;li&gt;В теоретическом введение надо написать информацию, связанную с Вашей работой. Это могут быть ключевые определения вместе с примерами или же просто описание какого-либо процесса/действия/объекта.&lt;/li&gt;
&lt;li&gt;Далее Вам нужно описать все этапы работы (иногда давая пояснения), желательно подкреплять эти этапы картинками (их нужно подписать и расставить ссылки на них в нужных местах).&lt;/li&gt;
&lt;li&gt;Итоги формулируются в соответствии с целью. Они тоже должны быть достаточно краткими.&lt;/li&gt;
&lt;li&gt;Источники, откуда Вы брали информацию для теоретического введения, необходимо указать в конце Вашего отчета (они должны быть оформлены по ГОСТу).&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://dmbelicheva.github.io/ru/post/week-1/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/ru/post/week-1/</guid>
      <description>&lt;h2 id=&#34;цели-прошедшей-недели&#34;&gt;Цели прошедшей недели&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Выполнить две лабораторные работы по предмету операционные системы.&lt;/li&gt;
&lt;li&gt;Посетить все занятия (операционные системы, физкультура и модуль переводчика)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;процесс-выполнения&#34;&gt;Процесс выполнения&lt;/h2&gt;
&lt;p&gt;Во вторник я посетила семинары по операционным системам, начала выполнение лабораторной работы №5, потом отправилась на занятия по физкультуре (где мы гуляла вокруг озера).
В пятницу у меня были дистанционные занятия по английскому языку (модуль переводчика). Там я написала тест по прошедшим темам.&lt;/p&gt;
&lt;h2 id=&#34;итоги&#34;&gt;Итоги&lt;/h2&gt;
&lt;p&gt;В результате выполнения двух лабораторных работ (5 и 6) я научилась работать с файловой системой Linux, а также ознакомилась с инструментами поиска файлов и фильтрации текстовых данных. Узнала, что такое перенаправление ввода/выводы и что такое конвейер. Продолжила освоение работы с терминалом Linux, изучение новых команд.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://dmbelicheva.github.io/ru/post/week-2/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/ru/post/week-2/</guid>
      <description>&lt;h2 id=&#34;цели-прошедшей-недели&#34;&gt;Цели прошедшей недели&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Выполнить две лабораторные работы по предмету операционные системы.&lt;/li&gt;
&lt;li&gt;Отметить День Победы&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;процесс-выполнения&#34;&gt;Процесс выполнения&lt;/h2&gt;
&lt;p&gt;Во вторник был праздничный день, который я провела на даче с друзьями. После этого я отправилась в Москву, где я начала выполнение лабораторнной работы №7.
В среду у меня были занятия по компьютерной алгебре, где мы продолжали работу с Maxima.
В четверг у меня был предмет технология программирования. Там мы писали программы на С++.
В пятницу у меня были занятия по английскому языку.&lt;/p&gt;
&lt;h2 id=&#34;итоги&#34;&gt;Итоги&lt;/h2&gt;
&lt;p&gt;В результате выполнения двух лабораторных работ (7 и 8) я освоила основные возможности командной оболочки Midnight Commander. Приобрела навыки практической работы по просмотру каталогов и файлов; манипуляций
с ними. А также познакомилась с операционной системой Linux и получила практические навыки работы с редактором vi, установленным по умолчанию практически во всех дистрибутивах.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://dmbelicheva.github.io/ru/post/week-3/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/ru/post/week-3/</guid>
      <description>&lt;h2 id=&#34;цели-прошедшей-недели&#34;&gt;Цели прошедшей недели&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Выполнить две лабораторные работы по предмету операционные системы.&lt;/li&gt;
&lt;li&gt;Написать контрольную работу по компьютерной алгебре&lt;/li&gt;
&lt;li&gt;Сдать зачет по английскому языку&lt;/li&gt;
&lt;li&gt;Сходить на ночь в университете&lt;/li&gt;
&lt;li&gt;Сходить на день открытых дверей в субботу&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;процесс-выполнения&#34;&gt;Процесс выполнения&lt;/h2&gt;
&lt;p&gt;Неделя началась достаточно неприятно (в понедельник были дистанционные лекции с 9 утра, но это не так плохо). Во вторник я пришла на семинары по операционным системам, и к моему огорчению, там было только два моих одногруппника и преподаватель, но потом пришли две мои подруги, что значительно улучшило мою жизнь. Я пыталась учиться программировать на bash (пока дается с трудом), но, как говорится, что не убивает нас, делает нас сильнее. В тот день осилила 10 лабораторную работу, что я конечно же считаю достижением. После этого я отправилась на физкультуру, где я провела достаточно утомительные полтора часа ходя по кругу. На следующий день меня ждали не очень приятные боли в мышцах. В среду я написала контрольную по компьютерной алгебре, она была легкой, особенно если учитывать тот факт, что нам разрешили пользоваться лекциями. Вот такой краткий обзор у меня получился. Заходите на мой сайт и следите за новостями моей прекрасной жизни!&lt;/p&gt;
&lt;h2 id=&#34;итоги&#34;&gt;Итоги&lt;/h2&gt;
&lt;p&gt;Неделя вышла продуктивной.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://dmbelicheva.github.io/ru/post/week-4/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/ru/post/week-4/</guid>
      <description>&lt;h2 id=&#34;цели-прошедшей-недели&#34;&gt;Цели прошедшей недели&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Выполнить две лабораторные работы по предмету операционные системы.&lt;/li&gt;
&lt;li&gt;Сдать зачет по английскому языку&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;процесс-выполнения&#34;&gt;Процесс выполнения&lt;/h2&gt;
&lt;p&gt;На этой неделе мне пришлось немало повозиться с 11 лабораторной работой, и в итоге я ее осилила, чем я очень горжусь. Я попыталась приобрести навыки программирования на bash (все прошло лучше, чем могло быть). Также я сдала зачет по английскому языку. Нам надо было написать и рассказать монолог, а потом мои одногруппники задавали мне дополнительные вопросы. Я смогла на все ответить. Лаборатные по технологиям программирования проходят не так гладко, как хотелось бы, но я держусь!&lt;/p&gt;
&lt;h2 id=&#34;итоги&#34;&gt;Итоги&lt;/h2&gt;
&lt;p&gt;Неделя вышла продуктивной.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошедшей неделе</title>
      <link>https://dmbelicheva.github.io/ru/post/week-5/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/ru/post/week-5/</guid>
      <description>&lt;h2 id=&#34;цели-прошедшей-недели&#34;&gt;Цели прошедшей недели&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Выполнить две лабораторные работы по предмету операционные системы.&lt;/li&gt;
&lt;li&gt;Написать программу.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;процесс-выполнения&#34;&gt;Процесс выполнения&lt;/h2&gt;
&lt;p&gt;На этой недели я наконец-то завершида выполнения лаборыторных работ. Честно признаюсь, было нелегко, но я смогла преодолеть все трудности и справиться с этими невыносимыми лабами. Несмотря на всю ту боль, что они мне причинили, я считаю они мне также очень помогли. Эти лабы закалили мой характер, укрепили мой внутренний стержень и подготовили меня к тернистому будущему. Спасибо, Вам, Дмитрий Сергеевич.&lt;/p&gt;
&lt;h2 id=&#34;итоги&#34;&gt;Итоги&lt;/h2&gt;
&lt;p&gt;Неделя вышла продуктивной.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git.</title>
      <link>https://dmbelicheva.github.io/ru/post/post-1/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/ru/post/post-1/</guid>
      <description>&lt;h2 id=&#34;системы-контроля-версий&#34;&gt;Системы контроля версий&lt;/h2&gt;
&lt;p&gt;Системы контроля версий (Version Control System, VCS) применяются при работе нескольких человек над одним проектом. Обычно основное дерево проекта хранится в локальном или удалённом репозитории, к которому настроен доступ для участников проекта. При
внесении изменений в содержание проекта система контроля версий позволяет их фиксировать, совмещать изменения, произведённые разными участниками проекта, производить откат к любой более ранней версии проекта, если это требуется.&lt;/p&gt;
&lt;p&gt;В классических системах контроля версий используется централизованная модель, предполагающая наличие единого репозитория для хранения файлов. Выполнение большинства функций по управлению версиями осуществляется специальным сервером. Участник проекта (пользователь) перед началом работы посредством определённых команд получает нужную ему версию файлов. После внесения изменений, пользователь размещает новую версию в хранилище. При этом предыдущие версии не удаляются из центрального хранилища и к ним можно вернуться в любой момент. Сервер может сохранять не полную версию изменённых файлов, а производить так называемую дельтакомпрессию — сохранять только изменения между последовательными версиями, что позволяет уменьшить объём хранимых данных.&lt;/p&gt;
&lt;p&gt;Системы контроля версий поддерживают возможность отслеживания и разрешения конфликтов, которые могут возникнуть при работе нескольких человек над одним файлом. Можно объединить (слить) изменения, сделанные разными участниками (автоматически или вручную), вручную выбрать нужную версию, отменить изменения вовсе или заблокировать файлы для изменения. В зависимости от настроек блокировка не позволяет другим пользователям получить рабочую копию или препятствует изменению рабочей копии файла средствами файловой системы ОС, обеспечивая таким образом, привилегированный доступ только одному пользователю, работающему с файлом.&lt;/p&gt;
&lt;p&gt;Системы контроля версий также могут обеспечивать дополнительные, более гибкие функциональные возможности. Например, они могут поддерживать работу с несколькими версиями одного файла, сохраняя общую историю изменений до точки ветвления версий и собственные истории изменений каждой ветви. Кроме того, обычно доступна информация о том, кто из участников, когда и какие изменения вносил. Обычно такого рода информация хранится в журнале изменений, доступ к которому можно ограничить.&lt;/p&gt;
&lt;p&gt;В отличие от классических, в распределённых системах контроля версий центральный репозиторий не является обязательным.&lt;/p&gt;
&lt;p&gt;Среди классических VCS наиболее известны CVS, Subversion, а среди распределённых — Git, Bazaar, Mercurial. Принципы их работы схожи, отличаются они в основном
синтаксисом используемых в работе команд.&lt;/p&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;p&gt;Git - это консольная утилита, для отслеживания и ведения истории изменения файлов, в вашем проекте. Чаще всего его используют для кода, но можно и для других файлов. Например, для картинок - полезно для дизайнеров.&lt;/p&gt;
&lt;p&gt;С помощью Git-a вы можете откатить свой проект до более старой версии, сравнивать, анализировать или сливать свои изменения в репозиторий.&lt;/p&gt;
&lt;p&gt;Репозиторием называют хранилище вашего кода и историю его изменений. Git работает локально и все ваши репозитории хранятся в определенных папках на жестком диске.&lt;/p&gt;
&lt;p&gt;Так же ваши репозитории можно хранить и в интернете. Обычно для этого используют три сервиса:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GitHub&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bitbucket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GitLab&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Каждая точка сохранения вашего проекта носит название коммит (commit). У каждого commit-a есть hash (уникальный id) и комментарий. Из таких commit-ов собирается ветка. Ветка - это история изменений. У каждой ветки есть свое название. Репозиторий может содержать в себе несколько веток, которые создаются из других веток или вливаются в них.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки научного программирования</title>
      <link>https://dmbelicheva.github.io/ru/post/post-4/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/ru/post/post-4/</guid>
      <description>&lt;h1 id=&#34;научные-языки-программирования&#34;&gt;Научные языки программирования&lt;/h1&gt;
&lt;p&gt;В компьютерном программировании , научный язык программирования может относиться к двум степеням той же концепции.&lt;/p&gt;
&lt;p&gt;В широком смысле научный язык программирования - это язык программирования, который широко используется в вычислительной науке и вычислительной математике . В этом смысле C / C ++ и Python можно рассматривать как языки научного программирования.&lt;/p&gt;
&lt;p&gt;В более широком смысле научный язык программирования - это язык, который разработан и оптимизирован для использования математических формул и матриц . Такие языки характеризуются не только наличием библиотек, выполняющих математические или научные функции, но и синтаксисом самого языка. Например, ни C ++, ни Python не имеют встроенных типов матриц или функций для матричной арифметики (сложение, умножение и т. Д.); вместо этого эта функция доступна через стандартные библиотеки. Языки научного программирования в более строгом смысле включают ALGOL , APL , Fortran , J , Julia ,Maple , MATLAB и R.&lt;/p&gt;
&lt;p&gt;Языки научного программирования не следует путать с научным языком в целом, который свободно относится к более высоким стандартам точности, правильности и краткости, ожидаемым от практиков научного метода .&lt;/p&gt;
&lt;h1 id=&#34;примеры&#34;&gt;Примеры&lt;/h1&gt;
&lt;h2 id=&#34;линейная-алгебра&#34;&gt;Линейная алгебра&lt;/h2&gt;
&lt;p&gt;Языки научного программирования предоставляют возможности для работы с линейной алгеброй.
Работа с большими векторами и матрицами является ключевой особенностью этих языков, поскольку линейная алгебра закладывает основу математической оптимизации , которая, в свою очередь, позволяет использовать основные приложения, такие как глубокое обучение.&lt;/p&gt;
&lt;h2 id=&#34;математическая-оптимизация&#34;&gt;Математическая оптимизация&lt;/h2&gt;
&lt;p&gt;В научном языке программирования мы можем вычислять оптимум функции с синтаксисом, близким к математическому языку.
В этом примере используется метод минимизации Ньютона . Современные языки научного программирования будут использовать автоматическое дифференцирование для вычисления градиентов и гессианов функции, заданной в качестве входных данных; ср. дифференцируемое программирование . Здесь для этой задачи выбрана автоматическая прямая дифференциация. Старые языки научного программирования, такие как почтенный Фортран, требовали от программиста передавать рядом с функцией, которая должна быть оптимизирована, функцию, которая вычисляет градиент, и функцию, которая вычисляет гессиан.&lt;/p&gt;
&lt;p&gt;Чем больше знаний о функции, которую необходимо минимизировать, тем больше можно использовать более эффективные алгоритмы. Например, выпуклая оптимизация обеспечивает более быстрые вычисления, когда функция является выпуклой, квадратичное программирование обеспечивает более быстрые вычисления, когда функция не более чем квадратична по своим переменным, и линейное программирование, когда функция максимально линейна.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки научного программирования</title>
      <link>https://dmbelicheva.github.io/ru/post/post-5/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/ru/post/post-5/</guid>
      <description>&lt;h1 id=&#34;введение-в-язык-си&#34;&gt;Введение в язык Си&lt;/h1&gt;
&lt;p&gt;Язык программирования Cи был создан Деннисом Ритчи из AT&amp;amp;T Bell Laboratories как язык программирования высокого уровня для разработки операционной системы UNIX. В настоящее время язык широко используется в различных областях. C особенно популярен у системных программистов, потому что позволяет писать программы просто и кратко.&lt;/p&gt;
&lt;p&gt;Основной книгой, описывающая язык Cи, является книга Брайана Кернигана и Денниса Ритчи « Язык программирования Cи» (1978). Книги по языку Си писали Bolon (1986), Gehani (1984), Hancock and Krieger (1986), Harbison и Steele (1984) и многие другие.&lt;/p&gt;
&lt;p&gt;В этом приложении мы попытаемся дать достаточно полное введение в Cи, так что те кто знаком с языками высокого уровня, такими как Pascal, PL/1 или Modula 2, смогут понять большую часть кода MINIX, приведенного в этой книге. Особенности Cи, которые не используются в MINIX, здесь не обсуждаются. Многочисленные тонкие моменты опущены. Акцент делается на чтении программ на Си, а не на написании кода.&lt;/p&gt;
&lt;h1 id=&#34;основы-языка-си&#34;&gt;Основы языка Си&lt;/h1&gt;
&lt;p&gt;Программа на Cи состоит из набора процедур (часто называемых функциями, даже если они не возвращают значений). Эти процедуры содержат объявления, операторы и другие элементы, которые вместе говорят компьютеру что надо делать. На рисунке A-1 показана небольшая процедура, в которой объявляются три целочисленные переменные и присваиваются им значения. Имя процедуры — main (главная). Процедура не имеет формальных параметров, на что указывает отсутствие каких-либо идентификаторов между скобками за именем процедуры. Тело процедуры заключено в фигурные скобки ( { } ). Этот пример показывает, что Cи имеет переменные, и что эти переменные должны быть объявлены до использования. Cи также имеет операторы, в этом примере это операторы присваивания. Все операторы должны заканчиваться точкой с запятой (в отличие от Паскаля, который использует двоеточия между операторами, а не после них).&lt;/p&gt;
&lt;p&gt;Комментарии начинаются с символов « / &lt;em&gt;» и заканчивается символами «&lt;/em&gt; /» и могут занимать несколько строк.&lt;/p&gt;
&lt;h1 id=&#34;основные-типы-данных&#34;&gt;Основные типы данных&lt;/h1&gt;
&lt;p&gt;Программы оперируют с различными данными, которые могут быть простыми и структурированными. Простые данные - это целые и вещественные числа, символы и указатели (адреса объектов в памяти). Целые числа не имеют, а вещественные имеют дробную часть. Структурированные данные - это массивы и структуры; они будут рассмотрены ниже.&lt;/p&gt;
&lt;p&gt;В языке различают понятия &amp;ldquo;тип данных&amp;rdquo; и &amp;ldquo;модификатор типа&amp;rdquo;. Тип данных - это, например, целый, а модификатор - со знаком или без знака. Целое со знаком будет иметь как положительные, так и отрицательные значения, а целое без знака - только положительные значения. В языке Си можно выделить пять базовых типов, которые задаются следующими ключевыми словами:&lt;/p&gt;
&lt;p&gt;char - символьный;
int - целый;
float - вещественный;
double - вещественный двойной точности;
void - не имеющий значения.
Дадим им краткую характеристику:&lt;/p&gt;
&lt;p&gt;Переменная типа char имеет размер 1 байт, ее значениями являются различные символы из кодовой таблицы, например: &amp;lsquo;ф&amp;rsquo;, &amp;lsquo;:&amp;rsquo;, &amp;lsquo;j&amp;rsquo; (при записи в программе они заключаются в одинарные кавычки).
Размер переменной типа int в стандарте языка Си не определен. В большинстве систем программирования размер переменной типа int соответствует размеру целого машинного слова. Например, в компиляторах для 16-разрядных процессоров переменная типа int имеет размер 2 байта. В этом случае знаковые значения этой переменной могут лежать в диапазоне от -32768 до 32767.
Ключевое слово float позволяет определить переменные вещественного типа. Их значения имеют дробную часть, отделяемую точкой, например: -5.6, 31.28 и т.п. Вещественные числа могут быть записаны также в форме с плавающей точкой, например: -1.09e+4. Число перед символом &amp;ldquo;е&amp;rdquo; называется мантиссой, а после &amp;ldquo;е&amp;rdquo; - порядком. Переменная типа float занимает в памяти 32 бита. Она может принимать значения в диапазоне от 3.4е-38 до 3.4e+38.
Ключевое слово double позволяет определить вещественную переменную двойной точности. Она занимает в памяти в два раза больше места, чем переменная типа float (т.е. ее размер 64 бита). Переменная типа double может принимать значения в диапазоне от 1.7e-308 до 1.7e+308.
Ключевое слово void (не имеющий значения) используется для нейтрализации значения объекта, например, для объявления функции, не возвращающей никаких значений.
Объект некоторого базового типа может быть модифицирован. С этой целью используются специальные ключевые слова, называемые модификаторами. В стандарте ANSI языка Си имеются следующие модификаторы типа:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;unsigned&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;signed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;short&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;long
Модификаторы записываются перед спецификаторами типа, например: unsigned char. Если после модификатора опущен спецификатор, то компилятор предполагает, что этим спецификатором является int. Таким образом, следующие строки:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;long а;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;long int а;
являются идентичными и определяют объект а как длинный целый. Табл. 1 иллюстрирует возможные сочетания модификаторов (unsigned, signed, short, long) со спецификаторами (char, int, float и double), а также показывает размер и диапазон значений объекта (для 16-разрядных компиляторов).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Языки разметки. LaTeX.</title>
      <link>https://dmbelicheva.github.io/ru/post/post-2/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://dmbelicheva.github.io/ru/post/post-2/</guid>
      <description>&lt;h2 id=&#34;языки-разметки-что-это-такое&#34;&gt;Языки разметки. Что это такое?&lt;/h2&gt;
&lt;p&gt;Язык разметки (markup language) – средство описания данных и метаданных, хранящихся в документе.&lt;/p&gt;
&lt;p&gt;Примеры языков разметки:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Язык разметки гипертекста HTML&lt;/li&gt;
&lt;li&gt;Язык разметки XML&lt;/li&gt;
&lt;li&gt;Язык разметки векторной графики SVG&lt;/li&gt;
&lt;li&gt;Язык разметки текста и формул TEX&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;основные-элементы-разметки&#34;&gt;Основные элементы разметки&lt;/h2&gt;
&lt;p&gt;Основными понятиями любого языка разметки являются теги, элементы и атрибуты.
Теги (tags) – специальные символы, позволяющие отличать в документе описание разметки от описания данных.
Элемент – это тэги в совокупности с их содержанием (данными).
Атрибут используется при определении элемента, чтобы задать какие-либо параметры, уточняющие характеристики данного элемента.&lt;/p&gt;
&lt;h2 id=&#34;виды-разметки&#34;&gt;Виды разметки&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Стилистическая разметка отвечает за внешний вид документа.&lt;/li&gt;
&lt;li&gt;Структурная разметка задает структуру документа.&lt;/li&gt;
&lt;li&gt;Семантическая (контентная) разметка информирует о содержании данных.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;latex&#34;&gt;LaTex&lt;/h2&gt;
&lt;p&gt;LaTEX (произносится как «лэйтех» или «латех») представляет собой инструмент для создания профессиональных документов. В его основе лежит парадигма редактирования WYSIWYM (что вижу, то и подразумеваю), то есть от пользователя требуется сосредоточиться только на содержимом документа, оставив его форматирование программе. Вместо ручного распределения текста по странице, как это делается в Microsoft Word или LibreOffice Writer, можно просто его вводить, позволив LaTeX заняться остальным.&lt;/p&gt;
&lt;h2 id=&#34;зачем-нужен-latex&#34;&gt;Зачем нужен LaTeX?&lt;/h2&gt;
&lt;p&gt;Этот инструмент используется повсеместно для создания научных документов, написания книг, а также многих других форм публикаций. Он позволяет не только создавать красиво оформленные документы, но также дает пользователям возможность очень быстро реализовывать такие сложные элементы печатного набора, как математические выражения, таблицы, ссылки и библиографии, получая согласованную разметку по всем разделам.&lt;/p&gt;
&lt;p&gt;Благодаря доступности большого числа открытых библиотек (об этом чуть позже) возможности LaTEX становятся практически безграничны. Эти библиотеки расширяют возможности пользователей еще больше, позволяя добавлять сноски, рисовать схемы и пр.&lt;/p&gt;
&lt;p&gt;Одна из наиболее веских причин, по которой многие используют LaTeX, заключается в отделении содержания документа от его стиля. Это означает, что после написания содержимого, можно с легкостью изменять его внешний вид. Аналогичным образом, можно создать один стиль документа и использовать его для стандартизации внешнего вида других.&lt;/p&gt;
&lt;p&gt;Это позволяет научным журналам создавать шаблоны для предлагаемых на рассмотрение материалов. Такие шаблоны имеют заданную разметку, в результате чего добавить остается лишь содержание. На деле существуют сотни подобных шаблонов, начиная с различных резюме и заканчивая презентациями слайдов.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
