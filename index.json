[{"authors":null,"categories":null,"content":"Дарья Беличева - студентка 1 курса бакалавриата РУДН. Активно занимаюсь изучением программирования и основ математики. Принимаю участие в школе кураторов. А также стараюсь участвовать во внеучебной жизни университета.\n  Download my resumé.\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Дарья Беличева - студентка 1 курса бакалавриата РУДН. Активно занимаюсь изучением программирования и основ математики. Принимаю участие в школе кураторов. А также стараюсь участвовать во внеучебной жизни университета.\n  Download my resumé.","tags":null,"title":"Беличева Дарья","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://example.com/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Беличева Дарья","吳恩達"],"categories":["Demo","教程"],"content":"Что такое отчет? Отчёт — это структурированное сообщение о результатах вашей работы, которое вы делаете в устной или письменной форме.\nОбычно в отчете должны присутствовать следующие элементы:\n Цель Задачи Теоретическое введение Описание выполнения работы Итоги Список литературы  Как оформлять отчет?  Перед выполнением работы обычно уже есть поставленная цель, поэтому ее и следует записать в отчет. Главное корректно, грамотно и кратко ее сформулировать. На основе цели перед Вами выдвигаются (или Вы сами составляете) задачи, которые необходимо выполнить, чтобы достичь желаемого результата. Задачи лучше написать в отчете под отельными номерами (также можно выделять подпункты, если требуется). В теоретическом введение надо написать информацию, связанную с Вашей работой. Это могут быть ключевые определения вместе с примерами или же просто описание какого-либо процесса/действия/объекта. Далее Вам нужно описать все этапы работы (иногда давая пояснения), желательно подкреплять эти этапы картинками (их нужно подписать и расставить ссылки на них в нужных местах). Итоги формулируются в соответствии с целью. Они тоже должны быть достаточно краткими. Источники, откуда Вы брали информацию для теоретического введения, необходимо указать в конце Вашего отчета (они должны быть оформлены по ГОСТу).  ","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"5e0172255875016576076c9700d9ba3c","permalink":"https://example.com/post/post-3/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/post-3/","section":"post","summary":"Здесь вы можете ознакомиться с базовой информацией об оформлении отчета.","tags":["Academic","开源"],"title":"Оформление отчета","type":"post"},{"authors":["Беличева Дарья","吳恩達"],"categories":["Demo","教程"],"content":"Цели прошедшей недели  Выполнить две лабораторные работы по предмету операционные системы. Посетить все занятия (операционные системы, физкультура и модуль переводчика)  Процесс выполнения Во вторник я посетила семинары по операционным системам, начала выполнение лабораторной работы №5, потом отправилась на занятия по физкультуре (где мы гуляла вокруг озера). В пятницу у меня были дистанционные занятия по английскому языку (модуль переводчика). Там я написала тест по прошедшим темам.\nИтоги В результате выполнения двух лабораторных работ (5 и 6) я научилась работать с файловой системой Linux, а также ознакомилась с инструментами поиска файлов и фильтрации текстовых данных. Узнала, что такое перенаправление ввода/выводы и что такое конвейер. Продолжила освоение работы с терминалом Linux, изучение новых команд.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"df19f6e9b5e470b61c2c33afb72c0937","permalink":"https://example.com/post/week-1/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/week-1/","section":"post","summary":"Здесь вы можете узнать итоги моей прошедшей недели, чему я научилась и над чем работала.","tags":["Academic","开源"],"title":"Пост по прошедшей неделе","type":"post"},{"authors":["Беличева Дарья","吳恩達"],"categories":["Demo","教程"],"content":"Цели прошедшей недели  Выполнить две лабораторные работы по предмету операционные системы. Отметить День Победы  Процесс выполнения Во вторник был праздничный день, который я провела на даче с друзьями. После этого я отправилась в Москву, где я начала выполнение лабораторнной работы №7. В среду у меня были занятия по компьютерной алгебре, где мы продолжали работу с Maxima. В четверг у меня был предмет технология программирования. Там мы писали программы на С++. В пятницу у меня были занятия по английскому языку.\nИтоги В результате выполнения двух лабораторных работ (7 и 8) я освоила основные возможности командной оболочки Midnight Commander. Приобрела навыки практической работы по просмотру каталогов и файлов; манипуляций с ними. А также познакомилась с операционной системой Linux и получила практические навыки работы с редактором vi, установленным по умолчанию практически во всех дистрибутивах.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"7d7324c983e9d56765538d7c43650f51","permalink":"https://example.com/post/week-2/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/week-2/","section":"post","summary":"Здесь вы можете узнать итоги моей прошедшей недели, чему я научилась и над чем работала.","tags":["Academic","开源"],"title":"Пост по прошедшей неделе","type":"post"},{"authors":["Беличева Дарья","吳恩達"],"categories":["Demo","教程"],"content":"Цели прошедшей недели  Выполнить две лабораторные работы по предмету операционные системы. Написать контрольную работу по компьютерной алгебре Сдать зачет по английскому языку Сходить на ночь в университете Сходить на день открытых дверей в субботу  Процесс выполнения Неделя началась достаточно неприятно (в понедельник были дистанционные лекции с 9 утра, но это не так плохо). Во вторник я пришла на семинары по операционным системам, и к моему огорчению, там было только два моих одногруппника и преподаватель, но потом пришли две мои подруги, что значительно улучшило мою жизнь. Я пыталась учиться программировать на bash (пока дается с трудом), но, как говорится, что не убивает нас, делает нас сильнее. В тот день осилила 10 лабораторную работу, что я конечно же считаю достижением. После этого я отправилась на физкультуру, где я провела достаточно утомительные полтора часа ходя по кругу. На следующий день меня ждали не очень приятные боли в мышцах. В среду я написала контрольную по компьютерной алгебре, она была легкой, особенно если учитывать тот факт, что нам разрешили пользоваться лекциями. Вот такой краткий обзор у меня получился. Заходите на мой сайт и следите за новостями моей прекрасной жизни!\nИтоги Неделя вышла продуктивной.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"cd34100e61902bc6ba35da422657e909","permalink":"https://example.com/post/week-3/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/week-3/","section":"post","summary":"Здесь вы можете узнать итоги моей прошедшей недели, чему я научилась и над чем работала.","tags":["Academic","开源"],"title":"Пост по прошедшей неделе","type":"post"},{"authors":["Беличева Дарья","吳恩達"],"categories":["Demo","教程"],"content":"Цели прошедшей недели  Выполнить две лабораторные работы по предмету операционные системы. Сдать зачет по английскому языку  Процесс выполнения На этой неделе мне пришлось немало повозиться с 11 лабораторной работой, и в итоге я ее осилила, чем я очень горжусь. Я попыталась приобрести навыки программирования на bash (все прошло лучше, чем могло быть). Также я сдала зачет по английскому языку. Нам надо было написать и рассказать монолог, а потом мои одногруппники задавали мне дополнительные вопросы. Я смогла на все ответить. Лаборатные по технологиям программирования проходят не так гладко, как хотелось бы, но я держусь!\nИтоги Неделя вышла продуктивной.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"4d0eee97f66f24aec1deb366868d3dea","permalink":"https://example.com/post/week-4/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/week-4/","section":"post","summary":"Здесь вы можете узнать итоги моей прошедшей недели, чему я научилась и над чем работала.","tags":["Academic","开源"],"title":"Пост по прошедшей неделе","type":"post"},{"authors":["Беличева Дарья","吳恩達"],"categories":["Demo","教程"],"content":"Системы контроля версий Системы контроля версий (Version Control System, VCS) применяются при работе нескольких человек над одним проектом. Обычно основное дерево проекта хранится в локальном или удалённом репозитории, к которому настроен доступ для участников проекта. При внесении изменений в содержание проекта система контроля версий позволяет их фиксировать, совмещать изменения, произведённые разными участниками проекта, производить откат к любой более ранней версии проекта, если это требуется.\nВ классических системах контроля версий используется централизованная модель, предполагающая наличие единого репозитория для хранения файлов. Выполнение большинства функций по управлению версиями осуществляется специальным сервером. Участник проекта (пользователь) перед началом работы посредством определённых команд получает нужную ему версию файлов. После внесения изменений, пользователь размещает новую версию в хранилище. При этом предыдущие версии не удаляются из центрального хранилища и к ним можно вернуться в любой момент. Сервер может сохранять не полную версию изменённых файлов, а производить так называемую дельтакомпрессию — сохранять только изменения между последовательными версиями, что позволяет уменьшить объём хранимых данных.\nСистемы контроля версий поддерживают возможность отслеживания и разрешения конфликтов, которые могут возникнуть при работе нескольких человек над одним файлом. Можно объединить (слить) изменения, сделанные разными участниками (автоматически или вручную), вручную выбрать нужную версию, отменить изменения вовсе или заблокировать файлы для изменения. В зависимости от настроек блокировка не позволяет другим пользователям получить рабочую копию или препятствует изменению рабочей копии файла средствами файловой системы ОС, обеспечивая таким образом, привилегированный доступ только одному пользователю, работающему с файлом.\nСистемы контроля версий также могут обеспечивать дополнительные, более гибкие функциональные возможности. Например, они могут поддерживать работу с несколькими версиями одного файла, сохраняя общую историю изменений до точки ветвления версий и собственные истории изменений каждой ветви. Кроме того, обычно доступна информация о том, кто из участников, когда и какие изменения вносил. Обычно такого рода информация хранится в журнале изменений, доступ к которому можно ограничить.\nВ отличие от классических, в распределённых системах контроля версий центральный репозиторий не является обязательным.\nСреди классических VCS наиболее известны CVS, Subversion, а среди распределённых — Git, Bazaar, Mercurial. Принципы их работы схожи, отличаются они в основном синтаксисом используемых в работе команд.\nGit Git - это консольная утилита, для отслеживания и ведения истории изменения файлов, в вашем проекте. Чаще всего его используют для кода, но можно и для других файлов. Например, для картинок - полезно для дизайнеров.\nС помощью Git-a вы можете откатить свой проект до более старой версии, сравнивать, анализировать или сливать свои изменения в репозиторий.\nРепозиторием называют хранилище вашего кода и историю его изменений. Git работает локально и все ваши репозитории хранятся в определенных папках на жестком диске.\nТак же ваши репозитории можно хранить и в интернете. Обычно для этого используют три сервиса:\n  GitHub\n  Bitbucket\n  GitLab\n  Каждая точка сохранения вашего проекта носит название коммит (commit). У каждого commit-a есть hash (уникальный id) и комментарий. Из таких commit-ов собирается ветка. Ветка - это история изменений. У каждой ветки есть свое название. Репозиторий может содержать в себе несколько веток, которые создаются из других веток или вливаются в них.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"71eb53a7be36879268b44d8bcd7838ef","permalink":"https://example.com/post/post-1/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/post-1/","section":"post","summary":"Здесь вы можете познакомиться с системой контроля версий git. Тут представлена необходимая информация для работы с git.","tags":["Academic","开源"],"title":"Управление версиями. Git.","type":"post"},{"authors":["Беличева Дарья","吳恩達"],"categories":["Demo","教程"],"content":"Научные языки программирования В компьютерном программировании , научный язык программирования может относиться к двум степеням той же концепции.\nВ широком смысле научный язык программирования - это язык программирования, который широко используется в вычислительной науке и вычислительной математике . В этом смысле C / C ++ и Python можно рассматривать как языки научного программирования.\nВ более широком смысле научный язык программирования - это язык, который разработан и оптимизирован для использования математических формул и матриц . Такие языки характеризуются не только наличием библиотек, выполняющих математические или научные функции, но и синтаксисом самого языка. Например, ни C ++, ни Python не имеют встроенных типов матриц или функций для матричной арифметики (сложение, умножение и т. Д.); вместо этого эта функция доступна через стандартные библиотеки. Языки научного программирования в более строгом смысле включают ALGOL , APL , Fortran , J , Julia ,Maple , MATLAB и R.\nЯзыки научного программирования не следует путать с научным языком в целом, который свободно относится к более высоким стандартам точности, правильности и краткости, ожидаемым от практиков научного метода .\nПримеры Линейная алгебра Языки научного программирования предоставляют возможности для работы с линейной алгеброй. Работа с большими векторами и матрицами является ключевой особенностью этих языков, поскольку линейная алгебра закладывает основу математической оптимизации , которая, в свою очередь, позволяет использовать основные приложения, такие как глубокое обучение.\nМатематическая оптимизация В научном языке программирования мы можем вычислять оптимум функции с синтаксисом, близким к математическому языку. В этом примере используется метод минимизации Ньютона . Современные языки научного программирования будут использовать автоматическое дифференцирование для вычисления градиентов и гессианов функции, заданной в качестве входных данных; ср. дифференцируемое программирование . Здесь для этой задачи выбрана автоматическая прямая дифференциация. Старые языки научного программирования, такие как почтенный Фортран, требовали от программиста передавать рядом с функцией, которая должна быть оптимизирована, функцию, которая вычисляет градиент, и функцию, которая вычисляет гессиан.\nЧем больше знаний о функции, которую необходимо минимизировать, тем больше можно использовать более эффективные алгоритмы. Например, выпуклая оптимизация обеспечивает более быстрые вычисления, когда функция является выпуклой, квадратичное программирование обеспечивает более быстрые вычисления, когда функция не более чем квадратична по своим переменным, и линейное программирование, когда функция максимально линейна.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"95bcfa03daf29be5756e3b9cd616cb65","permalink":"https://example.com/post/post-4/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/post-4/","section":"post","summary":"Здесь вы можете ознакомиться с базовой информацией о языках научного программирования.","tags":["Academic","开源"],"title":"Языки научного программирования","type":"post"},{"authors":["Беличева Дарья","吳恩達"],"categories":["Demo","教程"],"content":"Языки разметки. Что это такое? Язык разметки (markup language) – средство описания данных и метаданных, хранящихся в документе.\nПримеры языков разметки:\n Язык разметки гипертекста HTML Язык разметки XML Язык разметки векторной графики SVG Язык разметки текста и формул TEX  Основные элементы разметки Основными понятиями любого языка разметки являются теги, элементы и атрибуты. Теги (tags) – специальные символы, позволяющие отличать в документе описание разметки от описания данных. Элемент – это тэги в совокупности с их содержанием (данными). Атрибут используется при определении элемента, чтобы задать какие-либо параметры, уточняющие характеристики данного элемента.\nВиды разметки  Стилистическая разметка отвечает за внешний вид документа. Структурная разметка задает структуру документа. Семантическая (контентная) разметка информирует о содержании данных.  LaTex LaTEX (произносится как «лэйтех» или «латех») представляет собой инструмент для создания профессиональных документов. В его основе лежит парадигма редактирования WYSIWYM (что вижу, то и подразумеваю), то есть от пользователя требуется сосредоточиться только на содержимом документа, оставив его форматирование программе. Вместо ручного распределения текста по странице, как это делается в Microsoft Word или LibreOffice Writer, можно просто его вводить, позволив LaTeX заняться остальным.\nЗачем нужен LaTeX? Этот инструмент используется повсеместно для создания научных документов, написания книг, а также многих других форм публикаций. Он позволяет не только создавать красиво оформленные документы, но также дает пользователям возможность очень быстро реализовывать такие сложные элементы печатного набора, как математические выражения, таблицы, ссылки и библиографии, получая согласованную разметку по всем разделам.\nБлагодаря доступности большого числа открытых библиотек (об этом чуть позже) возможности LaTEX становятся практически безграничны. Эти библиотеки расширяют возможности пользователей еще больше, позволяя добавлять сноски, рисовать схемы и пр.\nОдна из наиболее веских причин, по которой многие используют LaTeX, заключается в отделении содержания документа от его стиля. Это означает, что после написания содержимого, можно с легкостью изменять его внешний вид. Аналогичным образом, можно создать один стиль документа и использовать его для стандартизации внешнего вида других.\nЭто позволяет научным журналам создавать шаблоны для предлагаемых на рассмотрение материалов. Такие шаблоны имеют заданную разметку, в результате чего добавить остается лишь содержание. На деле существуют сотни подобных шаблонов, начиная с различных резюме и заканчивая презентациями слайдов.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"a50349e3313aea7890ad6e1d122db02e","permalink":"https://example.com/post/post-2/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/post-2/","section":"post","summary":"Здесь вы можете узнать итоги моей прошедшей недели, чему я научилась и над чем работала.","tags":["Academic","开源"],"title":"Языки разметки. LaTeX.","type":"post"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://example.com/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"Введение Информация в информационных системах (ИС) возникает в процессе обработки хранящихся данных. На компьютерах, используемых для создания ИС, данные хранятся на постоянном запоминающем устройстве (ПЗУ) в виде именованных последовательностей, называемых файлами. Хранение файлов подобно хранению книг в библиотеке, и для организации доступа к ним требуется специальная система, обеспечивающая минимизацию времени доступа и удобство работы. Файловая система представляет совокупность служебных структур на носителе и средств операционной системы, обеспечивающих манипуляцию файлами. (Исторически сложилось, что операционные системы семейства Windows развиваются в двух направлениях (Windows 95, Windows 98 и Windows Ме составляют одно направление, а Windows NT и Windows 2000 второе направление), предоставляющих различные средства для работы со служебными структурами и файлами). Файловая система FAT (File Allocation Table) была разработана Биллом Гейтсом и Марком МакДональдом в 1977 году и первоначально использовалась в операционной системе 86-DOS. Чтобы добиться переносимости программ из операционной системы CP/M в 86-DOS, в ней были сохранены ранее принятые ограничения на имена файлов. В дальнейшем 86-DOS была приобретена Microsoft и стала основой для ОС MS-DOS 1.0, выпущенной в августе 1981 года. Эта файловая система была изначально создана для обеспечения произвольного доступа к файлам на гибких дисках относительно небольшого размера. Сейчас существует четыре версии FAT — FAT8, FAT12, FAT16 и FAT32. Они отличаются разрядностью записей в дисковой структуре, то есть количеством бит, отведённых для хранения номера кластера. FAT12 применяется в основном для дискет, FAT16 — для дисков малого объёма, FAT32- для жестких дисков. На основе FAT была разработана новая файловая система exFAT (extended FAT), используемая преимущественно для флеш-накопителей.\nСтруктура FAT В файловой системе FAT дисковое пространство любого логического диска делится на две области:\n системную область и область данных.  Системная область создается и инициализируется при форматировании, а впоследствии обновляется при манипулировании файловой структурой. Системная область состоит из следующих компонентов:\n загрузочного сектора, содержащего загрузочную запись (boot record); зарезервированных секторов (их может и не быть); таблицы размещения файлов (FAT, File Allocation Table); корневого каталога (Root directory, ROOT). Эти компоненты расположены на диске друг за другом. Область данных содержит файлы и каталоги, подчиненные корневому. Область данных разбивают на так называемые кластеры. Кластер - это один или несколько смежных секторов области данных. С другой стороны, кластер - это минимальная адресуемая единица дисковой памяти, выделяемая файлу. Т.е. файл или каталог занимает целое число кластеров. Для создания и записи на диск нового файла операционная система отводит для него несколько свободных кластеров диска. Эти кластеры не обязательно должны следовать друг за другом. Для каждого файла хранится список всех номеров кластеров, которые предоставлены данному файлу. Разбиение области данных на кластеры вместо использования секторов позволяет: уменьшить размер таблицы FAT; уменьшить фрагментацию файлов; сокращается длина цепочек файла и ускоряется доступ к файлу. Однако слишком большой размер кластера ведет к неэффективному использованию области данных, особенно в случае большого количества маленьких файлов (ведь на каждый файл теряется в среднем полкластера). В современных файловых системах (FAT32, HPFS, NTFS) эта проблема решается за счет ограничения размера кластера (максимум 4 Кбайта)  Картой области данных является Таблица размещения файлов (File Allocation Table - FAT) Каждый элемент таблицы FAT (12, 16 или 32 бит) соответствует одному кластеру диска и характеризует его состояние: свободен, занят или является сбойным кластером (bad cluster).\n Если кластер распределен какому-либо файлу (т.е., занят), то соответствующий элемент FAT содержит номер следующего кластера файла; последний кластер файла отмечается числом в диапазоне FF8h - FFFh (FFF8h - FFFFh); если кластер является свободным, он содержит нулевое значение 000h (0000h); кластер, непригодный для использования (сбойный), отмечается числом FF7h (FFF7h). Таким образом, в таблице FAT кластеры, принадлежащие одному файлу, связываются в цепочки. Таблица размещения файлов хранится сразу после загрузочной записи логического диска, ее точное расположение описано в специальном поле в загрузочном секторе. Она хранится в двух идентичных экземплярах, которые следуют друг за другом. При разрушении первой копии таблицы используется вторая. В связи с тем, что FAT используется очень интенсивно при доступе к диску, она обычно загружается в ОП (в буфера ввода/вывода или кэш) и остается там настолько долго, насколько это возможно.  Для просмотра и редактирования таблицы FAT можно использовать утилиту Disk Editor.\nПодробная информация о самом файле хранится в другой структуре, которая называется …","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://example.com/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"Здесь приведна основная информация про файловую систему FAT.","tags":["Deep Learning"],"title":"Файловая система FAT","type":"project"},{"authors":["Беличева Дарья","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://example.com/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]